Core Functionality
[ ] Implement service
[ ] Implement client

Nice things
[ ] clean up file names
[ ] add logging
[ ] ContextManager interface
[ ] Use pythonic args and convert to CLI options
[ ] add DESIGN.mkd
[ ] add usage examples to README
[ ] Basic unit tests eventually, maybe
[ ] Confirm and enforce python3 requirement (if necessary)
[ ] Run tests in virtualenv

 Design notes:

Want to be able to create a lemonbar and then look up existing lemonbars, something like:
```
# Client side
bar_content = build_lemonbar_content()
lc = LemonbarClient(service=os.env['LEMONBAR_SERVICE'], bar=os.env['LEMONBAR_NAME'])
lc.update(bar_content)

# need a way to trigger shutdown
```

```
# Service side

lb = LemonBar.from_yaml('config.yml')
ls = LemonbarService()
ls.register(lb)

ls.wait_for_shutdown()
```

So to do this we need a server/service/manager running in the background and a way to
connect to it

Need to reorganize files
- lemonbar.py - shared constants, etc
- bar.py - LemonBar
- service.py - LemonbarService
- client - LemonbarClient.py

Would be cool to define a format data type so that update() only updates what's new or requested

Objects:
- Lemonbar - representes a lemonbar instance
- LemonbarManager - manages a group of lemonbar instances
   - is this necessary or can we roll it into the Service
- LemonbarService - persistent background service that owns a LemonbarManager
- LemonbarClient - connects to a LemonbarService and provides an API for interacting with
                  existing Lemonbar instances
- LemonbarTransport - IPC
